'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateWithTracer = exports.Tracer = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodeUuid = require('node-uuid');

var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

var _performanceNow = require('performance-now');

var _performanceNow2 = _interopRequireDefault(_performanceNow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Tracer = function () {
  // @eventGroupId: an id to group the events of this tracer together

  function Tracer(eventGroupId) {
    _classCallCheck(this, Tracer);

    this.gid = eventGroupId;
    this.events = [];
    this.startTime = new Date().getTime();
    this.startHrTime = (0, _performanceNow2.default)();
  }

  _createClass(Tracer, [{
    key: 'logEvent',
    value: function logEvent(_ref) {
      var props = _ref.props;
      var info = _ref.info;
      var type = _ref.type;

      // TODO ensure props is a valid props thingy
      // TODO ensure info is a valid info thingy
      // TODO ensure type is a valid type thingy
      var id = _nodeUuid2.default.v4();
      // TODO make sure we know what that timestamp is relative to
      var timestamp = (0, _performanceNow2.default)();
      // const timestamp = (new Date()).getTime();
      this.events.push(_extends({ id: id }, props, { type: type, info: info, timestamp: timestamp }));
      // console.log(this.gid, 'logged event', type, info, 'at', timestamp);
    }
  }, {
    key: 'startInterval',
    value: function startInterval(info) {
      var intervalId = _nodeUuid2.default.v4();
      var type = 'startInterval';
      this.logEvent({
        props: { intervalId: intervalId },
        info: info,
        type: type
      });
      return intervalId;
    }
  }, {
    key: 'stopInterval',
    value: function stopInterval(intervalId, info) {
      var type = 'stopInterval';
      this.logEvent({
        props: { intervalId: intervalId },
        info: info,
        type: type
      });
    }
  }, {
    key: 'reportEvents',
    value: function reportEvents(url) {
      // send the serialized events to url;
      // console.log(`reporting to ${url}`);
      return {
        url: url,
        startTime: this.startTime,
        startHrTime: this.startHrTime,
        events: this.events
      };
    }
  }]);

  return Tracer;
}();

function decorateWithTracer(fn, tracer, info) {
  return function () {
    var intervalId = tracer.startInterval(info);
    try {
      var result = fn.apply(undefined, arguments);
      if (typeof result.then === 'function') {
        result.then(function (res) {
          tracer.stopInterval(intervalId, info);
          return res;
        }).catch(function (err) {
          // console.log('whoa, it threw an error!');
          tracer.stopInterval(intervalId, info);
          throw err;
        });
      } else {
        // console.log('did not return a promise. logging now');
        tracer.stopInterval(intervalId, info);
      }
      return result;
    } catch (e) {
      // console.log('yeah, it errored directly');
      tracer.stopInterval(intervalId, info);
      throw e;
    }
  };
}

exports.Tracer = Tracer;
exports.decorateWithTracer = decorateWithTracer;